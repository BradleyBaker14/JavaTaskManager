/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package formative2;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.*;
import javax.swing.*;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.Date;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author brads
 */
public class GUIApplication extends javax.swing.JFrame {
        private javax.swing.JLabel fileSizeLabel; // Label to display file size
        private javax.swing.JLabel fileCreationDateLabel;
        private List<Task<String>> tasks = new ArrayList<>();
    /**
     * Creates new form GUIApplication
     */
    public GUIApplication() {
        initComponents();
        fileSizeLabel = new javax.swing.JLabel();
        fileSizeLabel.setText("File Size: ");
        
        fileCreationDateLabel = new javax.swing.JLabel();
        fileCreationDateLabel.setText("File Creation Date: ");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        task_name = new javax.swing.JTextField();
        is_done = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        task_description = new javax.swing.JTextArea();
        deadline = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        task_category = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("Task Manager");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(386, 386, 386)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLabel2.setText("Task Name");

        jLabel3.setText("Deadline");

        jLabel4.setText("Done");

        jLabel6.setText("Description");

        task_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                task_nameActionPerformed(evt);
            }
        });

        is_done.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Please Select--", "Yes", "No" }));

        task_description.setColumns(20);
        task_description.setRows(5);
        jScrollPane2.setViewportView(task_description);

        jLabel7.setText("Category");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setText("DATABASE MANAGER");

        jButton1.setText("Add Task");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Save Changes");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton9.setText("Search Database");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(39, 39, 39))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton9)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setText("TEXT FILE MANAGER");

        jButton6.setText("Save To Text File");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Load From File");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Export To CSV");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(0, 30, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7))
                                .addGap(14, 14, 14)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deadline, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(is_done, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(task_category)
                                    .addComponent(task_name)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(task_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(deadline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(is_done, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(task_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setPreferredSize(new java.awt.Dimension(350, 466));

        jButton3.setText("Delete Task");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Task Name", "Deadline", "Done", "Category", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jButton5.setText("Display Data");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jLabel10.setText("Clear all the field and click search to clear the search");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jLabel10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void task_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_task_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_task_nameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try {
    // Load the Oracle JDBC driver class
    Class.forName("oracle.jdbc.driver.OracleDriver");
    
    // Establish a connection to the Oracle database
    Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "C##JavaAdmin5", "4685");

    // Retrieve task details from UI components
    String taskName = task_name.getText();
    Date deadlineDate = deadline.getDate(); // Get the selected date from JDateChooser
    String isDone = is_done.getSelectedItem().toString(); // Assuming is_done is a JComboBox
    String taskCategory = task_category.getText();
    String taskDescription = task_description.getText();
    
    // Define a date format for formatting the deadline
    SimpleDateFormat outputFormat = new SimpleDateFormat("dd-MM-yy");
    String formattedDeadline = outputFormat.format(deadlineDate);

    // Use PreparedStatement to create a parameterized SQL query and prevent SQL injection
    String query = "INSERT INTO C##JavaAdmin5.TASKS(task_name, deadline, is_done, task_category, task_description) VALUES (?, TO_DATE(?, 'DD-MM-YY'), ?, ?, ?)";
    PreparedStatement pstmt = conn.prepareStatement(query);
    
    // Set the values for the placeholders in the prepared statement
    pstmt.setString(1, taskName);
    pstmt.setString(2, formattedDeadline);
    pstmt.setString(3, isDone);
    pstmt.setString(4, taskCategory);
    pstmt.setString(5, taskDescription);

    // Execute the SQL insert statement and get the number of rows affected
    int rowsInserted = pstmt.executeUpdate();

    // Check if the insertion was successful and show a message dialog accordingly
    if (rowsInserted > 0) {
        JOptionPane.showMessageDialog(this, "Inserted");
    } else {
        JOptionPane.showMessageDialog(this, "Error! Insertion failed.");
    }

    // Close the PreparedStatement and database connection
    pstmt.close();
    conn.close();
} catch (ClassNotFoundException e) {
    // Handle the case where the Oracle driver is not found
    JOptionPane.showMessageDialog(this, "Oracle driver not found. Make sure the driver is in your classpath.");
    e.printStackTrace();
} catch (SQLException e) {
    // Handle SQL errors, such as invalid SQL syntax or database connection issues
    JOptionPane.showMessageDialog(this, "SQL Error: " + e.getMessage());
    e.printStackTrace();
} catch (Exception e) {
    // Handle other unexpected exceptions
    JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
    e.printStackTrace();
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
    // Attempt to parse the value in the first column of the selected row in jTable1 as an integer.
    int id = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());

    // Load the Oracle JDBC driver class.
    Class.forName("oracle.jdbc.driver.OracleDriver");

    // Establish a database connection with the Oracle database.
    Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "C##JavaAdmin5", "4685");

    // Create a Statement object for executing SQL queries.
    Statement st = conn.createStatement();

    // Display a confirmation dialog to ask the user if they want to delete the selected task.
    int r = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this?");
    
    // If the user confirms the deletion.
    if (r == 0) {
        // Execute an SQL DELETE query to remove the task with the specified ID from the database.
        int rowsAffected = st.executeUpdate("DELETE FROM C##JavaAdmin5.TASKS WHERE task_id=" + id);

        // If one or more rows were deleted, consider the deletion successful.
        if (rowsAffected > 0) {
            // Trigger a method to refresh the display (assuming formWindowOpened(null) does that).
            formWindowOpened(null);
        } else {
            // If no rows were deleted, display an error message indicating that the task with the given ID was not found.
            JOptionPane.showMessageDialog(this, "No rows deleted. Task with ID " + id + " not found.");
        }
    }
} catch (NumberFormatException e) {
    // Handle the case where the user has not selected a valid row with an integer ID.
    JOptionPane.showMessageDialog(this, "Invalid ID format. Please select a valid row.");
} catch (ClassNotFoundException | SQLException e) {
    // Handle exceptions related to database connectivity and SQL operations.
    // Print the exception details for debugging purposes.
    e.printStackTrace();
    
    // Display an error message to the user, indicating that the task deletion was unsuccessful.
    JOptionPane.showMessageDialog(this, "Error! Unable to delete the task. Please try again later.");
}
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
    // Load the Oracle JDBC driver class.
    Class.forName("oracle.jdbc.driver.OracleDriver");

    // Establish a database connection.
    Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "C##JavaAdmin5", "4685");

    // Create a statement for executing SQL queries.
    Statement st = conn.createStatement();

    // Define an SQL query to select all records from the "TASKS" table.
    String selectAll = "SELECT * FROM C##JavaAdmin5.TASKS";

    // Execute the SQL query and retrieve the result set.
    ResultSet rs = st.executeQuery(selectAll);

    // Get the table model of a jTable1 (assuming jTable1 is a Swing component).
    DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();

    // Clear existing data from jTable1.
    while (tblModel.getRowCount() > 0) {
        tblModel.removeRow(0);
    }

    // Iterate through the result set and populate the jTable1 and a tasks list.
    while (rs.next()) {
        // Retrieve data from the result set for each column.
        String task_id = String.valueOf(rs.getInt("task_id"));
        String task_name = rs.getString("task_name");
        java.sql.Date deadline = rs.getDate("deadline");
        String is_done = rs.getString("is_done");
        String task_category = rs.getString("task_category");
        String task_description = rs.getString("task_description");

        // Create an array of data representing a single row in the table.
        String tbData[] = { task_id, task_name, deadline.toString(), is_done, task_category, task_description };

        // Add the row data to the jTable1.
        tblModel.addRow(tbData);

        // Create a Task object and add it to a tasks list.
        Task<String> task = new Task<>(task_name, deadline, is_done, task_category, task_description);
        tasks.add(task);
    }

    // Close the ResultSet, Statement, and Connection to free up resources.
    rs.close();
    st.close();
    conn.close();

} catch (ClassNotFoundException e) {
    // Handle the case when the OracleDriver class is not found.
    System.err.println("Oracle JDBC driver not found.");
    e.printStackTrace();
} catch (SQLException ex) {
    // Handle SQL exceptions.
    // Log the error and provide detailed information about the exception.
    Logger.getLogger(GUIApplication.class.getName()).log(Level.SEVERE, "SQL Error", ex);
}
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
    }//GEN-LAST:event_formWindowOpened

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
       // Initialize a variable to store the ID, initially set to -1
int id = -1;
try {
    // Attempt to parse the ID from the jTable's selected row
    id = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
} catch (NumberFormatException e) {
    // Handle the case where the ID cannot be parsed to an integer
    JOptionPane.showMessageDialog(null, "Invalid ID format. Please select a valid ID.", "Error", JOptionPane.ERROR_MESSAGE);
    return; // Exit the method or handle the error as appropriate for your application.
}

try {
    // Load the Oracle JDBC driver
    Class.forName("oracle.jdbc.driver.OracleDriver");

    // Establish a connection to the Oracle database
    try (Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "C##JavaAdmin5", "4685")) {
        // Create a statement for executing SQL queries
        Statement st = conn.createStatement();
        String selectAll = "SELECT * FROM C##JavaAdmin5.TASKS where task_id=" + id;

        // Execute the SQL query and obtain a ResultSet
        ResultSet rs = st.executeQuery(selectAll);

        // Check if a matching record is found based on the ID
        if (rs.next()) {
            // Retrieve data from the ResultSet
            String taskName = rs.getString("task_name");
            java.util.Date deadlineDate = rs.getDate("deadline");
            String isDone = rs.getString("is_done");
            String taskCategory = rs.getString("task_category");
            String taskDescription = rs.getString("task_description");

            // Assuming deadline is a JDatePicker component
            // Set the date in the date picker based on the retrieved deadlineDate
            deadline.setDate(deadlineDate);

            // Assuming is_done is a JComboBox
            // Set the selected item in the combo box based on the retrieved isDone value
            is_done.setSelectedItem(isDone);

            // Assuming task_name, task_category, and task_description are JTextFields
            // Populate the text fields with the retrieved task details
            task_name.setText(taskName);
            task_category.setText(taskCategory);
            task_description.setText(taskDescription);
        } else {
            // Handle the case where no matching record is found
            JOptionPane.showMessageDialog(null, "No record found for ID: " + id, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
} catch (ClassNotFoundException | SQLException ex) {
    // Handle database-related exceptions
    Logger.getLogger(GUIApplication.class.getName()).log(Level.SEVERE, null, ex);
} catch (Exception ex) {
    // Handle any other unexpected exceptions
    ex.printStackTrace();
}

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      try {
    // Parse the task ID from the selected row in jTable1
    int id = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());

    // Load the Oracle JDBC driver
    Class.forName("oracle.jdbc.driver.OracleDriver");
    
    try (Connection conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE", "C##JavaAdmin5", "4685")) {
        // Define the SQL update statement
        String sql = "UPDATE C##JavaAdmin5.TASKS SET task_name=?, deadline=TO_DATE(?, 'DD-MM-YY'), is_done=?, task_category=?, task_description=? WHERE task_id=?";
        PreparedStatement preparedStatement = conn.prepareStatement(sql);
        
        // Set parameters for the update statement
        preparedStatement.setString(1, task_name.getText());
        
        // Convert Java Date to SQL Date and set the deadline parameter
        java.sql.Date sqlDate = new java.sql.Date(deadline.getDate().getTime());
        preparedStatement.setDate(2, sqlDate);
        
        // Set other parameters for the update statement
        preparedStatement.setString(3, is_done.getSelectedItem().toString());
        preparedStatement.setString(4, task_category.getText());
        preparedStatement.setString(5, task_description.getText());
        preparedStatement.setInt(6, id);
        
        // Execute the update and get the number of rows updated
        int rowsUpdated = preparedStatement.executeUpdate();
        
        // If rows were updated, refresh the form (assuming formWindowOpened(null) does this)
        if (rowsUpdated > 0) {
            formWindowOpened(null);
        }
    } catch (SQLException e) {
        // Handle SQL exception
        e.printStackTrace();  // Log the exception
        // Show an error message to the user
        JOptionPane.showMessageDialog(null, "An error occurred while updating the task. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
    }
} catch (ClassNotFoundException | NumberFormatException e) {
    // Handle class not found or number format exception
    e.printStackTrace();  // Log the exception
    // Show an error message to the user
    JOptionPane.showMessageDialog(null, "An error occurred. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
}


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Create a JFileChooser instance for selecting a file to save to.
JFileChooser fileChooser = new JFileChooser();

// Set the dialog title.
fileChooser.setDialogTitle("Save to File");

// Set a file filter to restrict file selection to text files with a .txt extension.
fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));

// Show the file chooser dialog and capture the user's choice.
int result = fileChooser.showSaveDialog(this);

// Check the user's choice.
if (result == JFileChooser.APPROVE_OPTION) {
    // The user chose to save the data to a file.
    File selectedFile = fileChooser.getSelectedFile();

    // Ensure that the selected file has a .txt extension.
    if (!selectedFile.getName().toLowerCase().endsWith(".txt")) {
        selectedFile = new File(selectedFile.getAbsolutePath() + ".txt");
    }

    try (
        // Create output streams and writers to write data to the selected file.
        FileOutputStream fos = new FileOutputStream(selectedFile);
        OutputStreamWriter osw = new OutputStreamWriter(fos, java.nio.charset.StandardCharsets.UTF_8);
        BufferedWriter writer = new BufferedWriter(osw)
    ) {
        // Iterate through a list of tasks and write their details to the file.
        for (Task<String> task : tasks) {
            writer.write(
                task.getTaskName() + "\t" + task.getDeadline() + "\t" +
                task.getIsDone() + "\t" + task.getTaskCategory() + "\t" +
                task.getTaskDescription() + "\n"
            );
        }

        // Get file properties such as size and creation time.
        Path filePath = Paths.get(selectedFile.getAbsolutePath());
        BasicFileAttributes fileAttributes = Files.readAttributes(filePath, BasicFileAttributes.class);
        long fileSize = fileAttributes.size();
        FileTime creationTime = fileAttributes.creationTime();

        // Display a success message with file properties.
        JOptionPane.showMessageDialog(
            this,
            "Data saved to file successfully.\nFile Size: " + fileSize + " bytes\nCreation Date: " + creationTime,
            "Success",
            JOptionPane.INFORMATION_MESSAGE
        );
    } catch (IOException ex) {
        // Handle IO-related exceptions, such as file write errors.
        JOptionPane.showMessageDialog(this, "Error saving data to file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        // Handle unexpected exceptions that may occur during the file-saving process.
        JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
} else if (result == JFileChooser.CANCEL_OPTION) {
    // Handle the case where the user cancels the file selection dialog
    JOptionPane.showMessageDialog(this,"File Selection Has Been Canceled");
} else if (result == JFileChooser.ERROR_OPTION) {
    // Handle any errors that might occur during file selection
    JOptionPane.showMessageDialog(this,"An Error has happened. Please Try Again!");
}


    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Create a JFileChooser dialog for selecting a file
JFileChooser fileChooser = new JFileChooser();
fileChooser.setDialogTitle("Load from File"); // Set the dialog title
fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt")); // Set a filter to display only text files

// Show the file chooser dialog and wait for user input
int result = fileChooser.showOpenDialog(this);

// Check if the user selected a file and clicked "Open"
if (result == JFileChooser.APPROVE_OPTION) {
    // Get the selected file
    File selectedFile = fileChooser.getSelectedFile();

    try (
        // Open the selected file for reading using FileInputStream, InputStreamReader, and BufferedReader
        FileInputStream fis = new FileInputStream(selectedFile);
        InputStreamReader isr = new InputStreamReader(fis, java.nio.charset.StandardCharsets.UTF_8);
        BufferedReader reader = new BufferedReader(isr)
    ) {
        // Clear existing data from the JTable and an ArrayList called 'tasks'
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        tblModel.setRowCount(0); // Clear existing data from the table
        tasks.clear(); // Clear existing tasks

        String line;
        // Read the file line by line
        while ((line = reader.readLine()) != null) {
            // Split the line into an array of strings using the tab character as a delimiter
            String[] rowData = line.split("\t");

            // Check if the split resulted in an array with 5 elements (expected format)
            if (rowData.length == 5) {
                // Extract data from the array
                String taskName = rowData[0];
                Date deadline = null;
                String isDone = rowData[2];
                String taskCategory = rowData[3];
                String taskDescription = rowData[4];

                try {
                    // Parse the date string from the file using the specified format
                    deadline = new SimpleDateFormat("dd-MM-yy").parse(rowData[1]);
                } catch (ParseException e) {
                    // Handle a date parsing error, display an error message, and continue to the next line
                    JOptionPane.showMessageDialog(this, "Error parsing date in the file: " + e.getMessage(), "Date Parsing Error", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                    continue; // Skip this row and continue with the next one
                }

                // Create a Task object with the extracted data and add it to the 'tasks' ArrayList
                Task<String> task = new Task<>(taskName, deadline, isDone, taskCategory, taskDescription);
                tasks.add(task);

                // Add a row to the JTable using the extracted rowData
                tblModel.addRow(rowData);
            }
        }

        // Get file properties (size and creation time)
        Path filePath = Paths.get(selectedFile.getAbsolutePath());
        BasicFileAttributes fileAttributes = Files.readAttributes(filePath, BasicFileAttributes.class);
        long fileSize = fileAttributes.size();
        FileTime creationTime = fileAttributes.creationTime();

        // Display a success message with file properties
        JOptionPane.showMessageDialog(this, "Data loaded from file successfully.\nFile Size: " + fileSize + " bytes\nCreation Date: " + creationTime, "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException ex) {
        // Handle an IO error, display an error message, and print the stack trace
        JOptionPane.showMessageDialog(this, "Error reading the file: " + ex.getMessage(), "File Reading Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
}
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // Create a new JFileChooser dialog.
JFileChooser fileChooser = new JFileChooser();

// Set the title of the file chooser dialog.
fileChooser.setDialogTitle("Export to CSV");

// Set a file filter to restrict the file selection to CSV files only.
fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files", "csv"));

// Show the file chooser dialog and capture the user's selection.
int result = fileChooser.showSaveDialog(this);

// Check the user's choice.
if (result == JFileChooser.APPROVE_OPTION) {
    // User selected a file to save.

    // Get the selected file from the file chooser.
    File selectedFile = fileChooser.getSelectedFile();

    // Ensure that the selected file has a .csv file extension.
    if (!selectedFile.getName().toLowerCase().endsWith(".csv")) {
        // If not, add the .csv extension to the file.
        selectedFile = new File(selectedFile.getAbsolutePath() + ".csv");
    }

    try {
    // Call the exportToCSV method to export data to the selected CSV file.
    exportToCSV(selectedFile);

    // Display a success message to the user.
    JOptionPane.showMessageDialog(this, "Data exported to CSV file successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
}catch (Exception ex) {
    // Handle unexpected exceptions by displaying an error message to the user.
    JOptionPane.showMessageDialog(this, "An unexpected error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

    // Print the stack trace for debugging purposes.
    ex.printStackTrace();
}
}
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
    // Get the search criteria from the input field
    String searchTaskName = task_name.getText();

    // Create a new ArrayList to store filtered tasks
    List<Task<String>> filteredTasks = new ArrayList<>();

    // Iterate through tasks and add matching tasks to the filtered list
    for (Task<String> task : tasks) {
        // Check if the task's name contains the search criteria
        if (task.getTaskName().contains(searchTaskName)) {
            // If it matches, add it to the filteredTasks list
            filteredTasks.add(task);
        }
    }

    // Update the table with the filtered tasks
    // Get the table model from jTable1
    DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();

    // Clear existing data from the table
    tblModel.setRowCount(0);

    // Iterate through the filtered tasks and add them to the table
    for (Task<String> task : filteredTasks) {
        // Create an array of data representing the task
        String[] rowData = {
            task.getTaskName(),
            task.getDeadline().toString(),
            task.getIsDone(),
            task.getTaskCategory(),
            task.getTaskDescription()
        };

        // Add a new row with the task data to the table model
        tblModel.addRow(rowData);
    }
} catch (NullPointerException e) {
    // Handle a NullPointerException if it occurs
    JOptionPane.showMessageDialog(null, "Error: NullPointerException occurred.");
} catch (ClassCastException e) {
    // Handle a ClassCastException if it occurs
    JOptionPane.showMessageDialog(null, "Error: ClassCastException occurred.");
} catch (Exception e) {
    // Handle any other unexpected exceptions
    JOptionPane.showMessageDialog(null, "An unexpected error occurred: " + e.getMessage());
}

    }//GEN-LAST:event_jButton9ActionPerformed
    private void exportToCSV(File file) {
    try (FileWriter writer = new FileWriter(file)) {
        // Obtain the data model from the JTable
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowCount = model.getRowCount(); // Get the number of rows in the table
        int columnCount = model.getColumnCount(); // Get the number of columns in the table

        // Write headers to the CSV file
        for (int i = 0; i < columnCount; i++) {
            writer.append(model.getColumnName(i)); // Get the column name
            if (i < columnCount - 1)
                writer.append(','); // Add a comma to separate columns
            else
                writer.append('\n'); // Add a new line at the end of the header row
        }

        // Write data rows to the CSV file
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < columnCount; j++) {
                writer.append(model.getValueAt(i, j).toString()); // Get cell value and convert to string
                if (j < columnCount - 1)
                    writer.append(','); // Add a comma to separate columns
                else
                    writer.append('\n'); // Add a new line at the end of each data row
            }
        }
    } catch (IOException e) {
        // Handle the IOException by displaying an error message with JOptionPane
        JOptionPane.showMessageDialog(this, "Error exporting to CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

public class Task<T> {
    private T taskName;  // The name of the task
    private Date deadline;  // The deadline for the task
    private T isDone;  // Indicates whether the task is done or not (e.g., true/false)
    private T taskCategory;  // The category or type of the task
    private T taskDescription;  // A description or details about the task

    // Constructor to initialize a Task object
    public Task(T taskName, Date deadline, T isDone, T taskCategory, T taskDescription) {
        this.taskName = taskName;
        this.deadline = deadline;
        this.isDone = isDone;
        this.taskCategory = taskCategory;
        this.taskDescription = taskDescription;
    }

    // Getter for the task name
    public T getTaskName() {
        return taskName;
    }

    // Setter for the task name
    public void setTaskName(T taskName) {
        this.taskName = taskName;
    }

    // Getter for the deadline
    public Date getDeadline() {
        return deadline;
    }

    // Setter for the deadline
    public void setDeadline(Date deadline) {
        this.deadline = deadline;
    }

    // Getter for the task completion status
    public T getIsDone() {
        return isDone;
    }

    // Setter for the task completion status
    public void setIsDone(T isDone) {
        this.isDone = isDone;
    }

    // Getter for the task category
    public T getTaskCategory() {
        return taskCategory;
    }

    // Setter for the task category
    public void setTaskCategory(T taskCategory) {
        this.taskCategory = taskCategory;
    }

    // Getter for the task description
    public T getTaskDescription() {
        return taskDescription;
    }

    // Setter for the task description
    public void setTaskDescription(T taskDescription) {
        this.taskDescription = taskDescription;
    }

    // Example error handling when setting a date for the deadline
    public void setDateWithValidation(Date date) {
        try {
            if (date.after(new Date())) {
                this.deadline = date;
            } else {
                // Display an error message using JOptionPane if the provided date is not in the future
                JOptionPane.showMessageDialog(null, "Invalid date. Deadline must be in the future.");
            }
        } catch (Exception e) {
            // Handle any other exceptions that may occur during date validation and display an error message
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage());
        }
    }
}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
            //</editor-fold>
            
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GUIApplication().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser deadline;
    private javax.swing.JComboBox<String> is_done;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField task_category;
    private javax.swing.JTextArea task_description;
    private javax.swing.JTextField task_name;
    // End of variables declaration//GEN-END:variables
}
